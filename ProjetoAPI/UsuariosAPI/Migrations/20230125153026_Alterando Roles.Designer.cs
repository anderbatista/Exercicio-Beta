// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UsuariosAPI.Data;

namespace UsuariosAPI.Migrations
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20230125153026_Alterando Roles")]
    partial class AlterandoRoles
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "618b6a17-075f-4fda-921c-539e5c02f28d",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 100,
                            ConcurrencyStamp = "7bf9367d-95cb-4b50-ae76-1acb0458526a",
                            Name = "lojista",
                            NormalizedName = "LOJISTA"
                        },
                        new
                        {
                            Id = 1000,
                            ConcurrencyStamp = "051576f8-705b-4d36-82d6-8b7af2926622",
                            Name = "cliente",
                            NormalizedName = "CLIENTE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 100,
                            RoleId = 100
                        },
                        new
                        {
                            UserId = 1000,
                            RoleId = 1000
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("UsuariosAPI.Models.CustomIdentityUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Bairro")
                        .HasColumnType("text");

                    b.Property<string>("CPF")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Cep")
                        .HasColumnType("text");

                    b.Property<string>("Complemento")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Localidade")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp");

                    b.Property<string>("Logradouro")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Uf")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CPF")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Bairro = "bairro",
                            CPF = "00000000000",
                            Cep = "000000000",
                            Complemento = "complemento",
                            ConcurrencyStamp = "47c9e85c-5fb0-4399-a393-36739ecfaa26",
                            DataCriacao = new DateTime(2023, 1, 25, 12, 30, 26, 636, DateTimeKind.Local).AddTicks(811),
                            DataNascimento = new DateTime(2023, 1, 25, 12, 30, 26, 637, DateTimeKind.Local).AddTicks(2839),
                            Email = "admin@cleartech.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Logradouro = "logradouro",
                            NormalizedEmail = "ADMIN@CLEARTECH.COM",
                            NormalizedUserName = "ADMIN",
                            Numero = 0,
                            PasswordHash = "AQAAAAEAACcQAAAAEBGS/ify7xlVEiPuFzJuYh9d1R1XkS13cCC4mPUiRQh7pe9PWjwuly6Fj0c3vi9VkQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e3ab63fd-8ddf-4433-a66e-4762ea145b7c",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 100,
                            AccessFailedCount = 0,
                            Bairro = "bairro",
                            CPF = "11111111111",
                            Cep = "111111111",
                            Complemento = "complemento",
                            ConcurrencyStamp = "d0f37439-2542-4eee-a4ad-6d701d4baa2e",
                            DataCriacao = new DateTime(2023, 1, 25, 12, 30, 26, 637, DateTimeKind.Local).AddTicks(3931),
                            DataNascimento = new DateTime(2023, 1, 25, 12, 30, 26, 637, DateTimeKind.Local).AddTicks(3934),
                            Email = "lojista@cleartech.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Logradouro = "logradouro",
                            NormalizedEmail = "LOJISTA@CLEARTECH.COM",
                            NormalizedUserName = "LOJISTA",
                            Numero = 0,
                            PasswordHash = "AQAAAAEAACcQAAAAEPk+u6EWix18XJa/NxXj2dzm+J7Rloa9kQ1fG1EgMBjk7FzLoHrGa9qFf+sgD6rE8Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8e477054-abc9-469e-88ca-ec3bd839f5f9",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "lojista"
                        },
                        new
                        {
                            Id = 1000,
                            AccessFailedCount = 0,
                            Bairro = "bairro",
                            CPF = "22222222222",
                            Cep = "222222222",
                            Complemento = "complemento",
                            ConcurrencyStamp = "300fb935-4f1b-455a-90f3-83f1eba07e0b",
                            DataCriacao = new DateTime(2023, 1, 25, 12, 30, 26, 637, DateTimeKind.Local).AddTicks(3941),
                            DataNascimento = new DateTime(2023, 1, 25, 12, 30, 26, 637, DateTimeKind.Local).AddTicks(3942),
                            Email = "cliente@cleartech.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Logradouro = "logradouro",
                            NormalizedEmail = "CLIENTE@CLEARTECH.COM",
                            NormalizedUserName = "CLIENTE",
                            Numero = 0,
                            PasswordHash = "AQAAAAEAACcQAAAAELV0BCuJyUU5EpwinBC3VY25EIibF1uuFTbROVxuru9ON09kdIHLWtADubrcgKp1uQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f71c679a-7ef7-4e9d-9cc9-79d3eb11bcc3",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "cliente"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("UsuariosAPI.Models.CustomIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("UsuariosAPI.Models.CustomIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UsuariosAPI.Models.CustomIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("UsuariosAPI.Models.CustomIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
